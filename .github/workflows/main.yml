name: Main workflow

on:
  push:
    branches: [ main ]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}
  HEROKU_APP_NAME: 'zoltan-pal-epam-nye-progkor'

jobs:
  build:
    name: CI build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build and deploy with Maven
      run: |
        # Versioning setup
        version_prefix=`mvn help:evaluate -Dexpression=project.version --quiet -DforceStdout --file warehouse/pom.xml | awk -F. '{print $1"."$2}'`
        version="$version_prefix.${{github.run_number}}"
        echo "Setting artifact version to $version"
        # Push version to env
        echo "ARTIFACT_VERSION=$version" >> $GITHUB_ENV
        # Overwrite local artifact version
        mvn -B versions:set -DnewVersion="$version" --file warehouse/pom.xml
        # Build and deploy artifact
        mvn -B deploy --file warehouse/pom.xml
        cp "warehouse/web/target/web-${version}.jar" "warehouse/web/target/warehouse.jar"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=raw,value=${{ env.ARTIFACT_VERSION }}
    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: ./warehouse
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    outputs:
      artifactVersion: ${{ env.ARTIFACT_VERSION }}
  analyze:
    name: SonarCloud analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify --file warehouse/pom.xml org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=zoltan-pal_epam-nye-progkor -Dsonar.scm.exclusions.disabled=true
  deploy:
    name: Deploy to Heroku
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Log in to the GitHub Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Log in to the Heroku Container registry
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:login
    - name: Get image from packages, tag and push to Heroku
      run: |
        docker pull ghcr.io/zoltan-pal/epam-nye-progkor:${{ env.ARTIFACT_VERSION }}
        docker tag ghcr.io/zoltan-pal/epam-nye-progkor:${{ env.ARTIFACT_VERSION }} registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web
        docker push registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web
      env:
        ARTIFACT_VERSION: ${{ needs.build.outputs.artifactVersion }}
    - name: Release app on Heroku
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:release -a ${{ env.HEROKU_APP_NAME }} web
